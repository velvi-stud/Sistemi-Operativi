Un sistema è composto di un buffer di N posizioni, 2*N processi attivi ed un processo coordinatore. 
Il processo coordinatore estrae uno dopo l'altro in maniera casuale i numeri da 1 a N e ad ogni estrazione i processi competono per aggiudicarsi l'accesso alla posizione corrispondente del buffer, scrivendone il proprio PID. 
Un processo cha ha scritto il proprio PID nel buffer non partecipa più alla contesa. 
Quando tutte le posizioni del buffer sono state assegnate, il coordinatore si alterna con l’ultimo processo che ha avuto accesso al buffer nel leggere e stampare, uno alla volta, il contenuto del buffer.

//** FATTO SUCCESSIVAMENTE **//

define N;
int buf [N] all of -1;

mutex m = 1;
int x;
int z = 0;
int last = -1;

mutex s = 0, ok = 0, b = 0, me=0;

int j = 0;

pick_n(){

	while (1){
		lock(m)
		x = 1+rand()%N;
		unlock(m)
		unlock(ok) // sblocco i child per l'aggiudico della posizione x
		lock(s) // aspetta che uno di loro abbia scelto e che mi sblocchi per la prossima pesca
	}
	
	unlock(b)
	lock(me);
	
	while(j != N){
		lock(b)
		print(buf[j]);
		j++;
		unlock(b)
	}
	
}

child(){

	while(1){
		lock(ok);
		lock(m);
		if(z<N && buf[x]==-1){ // se ci sono numeri da estrarre e se la posizione estratta è da assegnare
			buf[x] = getpid()
			z++;
			last = getpid()
			unlock(s) // sblocco il coordinatore 
			unlock(m)
			break;
		}
		else if(z == N){ // estratti tutti i numeri
			unlock(m);
			exit(); // esco
		}
		else{ // se il buffer era già assegnato, reitero per cercare di aggiudicare un altra posizione 
			unlock(m)
		}	
	}
	
	lock(b)
	if (last != getpid()){ // non sono l'ultimo processo
		unlock(b);
		exit();
	}
	
	// sono l'ultimo processo
	lock(b);
	unlock(me);
	
	while(j != N){
		lock(b)
		print(buf[j]);
		j++;
		unlock(b)
	}
	
}


