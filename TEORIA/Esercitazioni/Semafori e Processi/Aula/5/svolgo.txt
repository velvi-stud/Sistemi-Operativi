#define K 5

fork[K]: array of signal: all of 1
filo[K]: array of signal: all of 0
//0 -> pensante
//1 -> affamato
//2 -> mangiatore

mutex : semaphore: 1
id: int: 0

process_table(){
begin
    for i=0 to K
        process_philosopher
end
}

process_philosopher(){
begin
    wait(mutex);
    int p = id;
    id++; 
    signal(mutex);
    int s = (p)%K;
    int d = (p+1)%K;
    
    repeat 
            
            wait(mutex);
            if ( state(fork[s]) == 1 && state(fork[d]) == 1 ) then
                wait(fork[s]);
                wait(fork[d]);
                signal(mutex);
            else
                signal(mutex);
                while(state(filo[p])<2) do nothing
                wait(filo[p]);wait(filo[p]);
            
            <mangia>
            
            wait(mutex);
            signal(fork[s]);
            signal(fork[d]);
            signal(filo[s]);
            signal(filo[d]);
            signal(mutex);
            
            <pensa>
            sleep(5);
            
    forever
end
}
