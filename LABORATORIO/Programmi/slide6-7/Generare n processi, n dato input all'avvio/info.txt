fork() crea un esatto duplicato del processo che chiama la funzione fork().
Questo intende che tu hai 2 processi che sono esattamente gli stessi E ALLO STESSO PUNTO DEL PROGRAMMA.

ESEMPIO:
void fork2(){
printf("L0\n");
fork();
printf("L1\n");
fork();
printf("OK\n");
}

Processo A (processo originale):
    L0 (processo A esegue fork e genera processo B)
    L1 (processo A esegue dinuovo fork e genera processo C)
    -> stampa OK

Processo B (processo cretato da A quando esegue da L0) [si era fermato ad L1]:
    L1 (processo B esegue fork e genera processo D)
    -> stampa OK

Processo C (processo cretato da A quando esegue da L1) [si era fermato alla stampa]:
    -> stampa OK

Processo D (processo cretato da B quando esegue da L1) [si era fermato alla stampa]:
    -> stampa OK



Per fare fare solo cose ai processi forkati si fa con il childpid;

ESEMPIO:
void fork2(){
printf("L0\n");
pid_t child1= fork();
if (child1 == 0){
    ...stuff process B
}
printf("L1\n");
pid_t child2= fork();
if (child2 == 0){
    ...stuff process C
}
printf("OK\n");
}

