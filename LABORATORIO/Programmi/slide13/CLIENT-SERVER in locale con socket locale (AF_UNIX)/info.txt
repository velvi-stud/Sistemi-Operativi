Il client fa una richiesta al server per avere il suo servizio e gli passa un carattere
Il server elabora il carattere inviato da client e lo rispedisce modificato.

La connessione si basa su SOCKET locali utilizzando il tipo AF_UNIX (struct sockaddr_un)
Sia il client che il server si piazzano su una cartella di lavoro condivisa ove risiede la sock per la comunicazione

Il server, inizialemente crea una nuova socket generica aventi caratteristiche: 
    -> int server_sockfd = socket(AF_UNIX, SOCK_STREAM, 0); 
Una volta nominata provvede a personalizzarla: 
    -> bind(server_sockfd, (struct sockaddr*) &server_address, sizeof(server_address)); // assegnamo il nome alla socket, indirizzo e size.
Ovviamente, prima va creata una struct sockaddr personalizzata (poichè è locale si usa struct sockaddr_un).
    Dapprima si inserisce il tipo di connessione (in questo caso locale è AF_UNIX):
        -> server_address.sun_family = AF_UNIX;
    Poi si assegna il nome alla socket:
        -> strcpy(server_address.sun_path, "server_socket");
Si setta il server in ascolto (al massimo 5 processi il parallelo):
    -> listen(server_sockfd, 5);
Accetta la connessione, in questo caso si utlizza la stessa socket, ma come canale di comunicazione usando la client_sockfd per contattare il client:
    -> int client_sockfd = accept(server_sockfd, (struct sockaddr*) &client_address, &client_len);
Ovviamente, prima va creata unaltra struct sockaddr_un client_address che ha client_len = sizeof(cclient_address);
ATTENZIONE: il client parla con la socket_server instanziata dal server, il server ideologicamente si piazza su un'altro file descriptor definito dalla accept. Deve essere vista la socket come sorta di standard in/out ove sta in ascolto sul canale in e per parlare deve connettersi al canale out.
E infine possono parlare tramite i canali read e write come normali file descriptor però sul canale aperto client_dockfd in comunicazione

Il client, inizialmente crea una nuova socket generica:
    -> sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
Poi andremo a definire le caratteristiche che deve avere la socket che si vuole andare a connettere
    In particolare il tipo di socket che usa il server:
        -> address.sun_family = AF_UNIX;
    E il nome che è stato dato alla socket dal server:
        -> strcpy(address.sun_path, "server_socket"); 
Successivamente si provvederà alla connessione della socket sul canale di comunicazione definito dalla socket avente (struct sockaddr) address caratteristiche: 
    ->int result = connect(sockfd, (struct sockaddr*) &address, len);
Ed infine aspetta che il server gli dia la connessione
Una volta ottenuta si comunicherà tramite i canali read e write come normali file descriptor però sul canale aperto server_dockfd in comunicazione.



