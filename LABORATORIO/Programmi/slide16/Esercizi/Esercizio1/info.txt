• Si realizzi un programma in C e Posix sotto Linux che, utilizzando la libreria Pthread
• lancia n thread per cercare un elemento in una matrice nxn di caratteri
• Ognuno dei thread cerca l'elemento in una delle righe della matrice
• Non appena un thread ha trovato l'elemento cercato, rende note agli altri thread le coordinate dell'elemento e tutti i thread terminano (sono cancellati)




Praticamente la sincronizzazione sta in:

void *func(void *par){
    struct argument *arg= (struct argument *) par;
    
----------> esegue il ciclo per N elementi e se una variabile flag è posta a 0 (LA variabile globale flag indica se è stata trovato il carattere)
    for(int i=0;i<N && flag==0;i++){
----------> se il carattere è stato trovato
          if(arg->arr[i]==pat){
----------> blocca il mutex per far si che ci sia un'altro thread che lo ha trovato aspetti
                pthread_mutex_lock(&mutex);
----------> una volta sbloccato controlla la variabile flag poichè, se per ipotesi ci siano 2 thread t1 e t2 che richiedono il lock, t1 riesce a bloccarlo e t2 aspetta il suo turno, una volta che t1 setta la variabile flag a 1 e quindi dopo la sua esecuzione devono finire tutti i programmi. una volta che t2 riesce ad acquisire il lock non potrà fare niente poichè la flag = 1 gli impone di uscire (prima però esegue l'unlock del mutex per altri processi bloccati come t2)
                   if (flag==1){
                    pthread_mutex_unlock(&mutex);
                    pthread_exit(NULL);
                    }
----------> stampa la posizine del carattere                    
                printf(" find result at position. Row: %d Column: %d \n",arg->row+1,i);
----------> setta il flag a 1
                flag=1;
----------> sblocca il mutex                
                pthread_mutex_unlock(&mutex);
----------> esce poichè l'ha trovato
                pthread_exit(NULL);
          }else{
----------> se non avesse matchato il carattere (per prova dell'esecuzione di altri thread) stampa il carattere considerato
              printf(" %c ",arg->arr[i]);
          }
    } printf("\n");
----------> uscita normale nel caso: o si è scorso tutta la riga e non si è trovato il pattern oppure la flag=1 e sono uscito poichè qualche thread l'ha trovato
    pthread_exit(NULL);
}



Per il passaggio di parametri: 

//ho usato una struct contenente l'array da passare (riga della matrice) e l'indice della relativa riga passata 
struct argument{
    char *arr;
    int row;
};


l'ho passata nell'inizializzazione come:

//definizione dei thread, stilo le variabili e passo alla creazione del thread nella funzione con la variabile struct argument
pthread_t pidt[N];
struct argument arg;
for(int i=0;i<N;i++){
    arg.arr=matrix[i];
    arg.row=i;
    pthread_create(&pidt[i],NULL,func,&arg);
}


nel thread si ha:

//poichè è void la posso castare a modo mio
void *func(void *par){
    struct argument *arg= (struct argument *) par;
