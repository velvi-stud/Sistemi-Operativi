//client locale
#include <sys/types.h> 
#include <sys/socket.h> 
#include <stdio.h> 
#include <sys/un.h> 
#include <unistd.h>
int main () { 
int sockfd; 
int len;
struct sockaddr_un address; 
int result;
char ch =‘A’;
/* creiamo una socket per il client */ 
sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
/* definiamo le generalità della socket del server */ 
address.sun_family = AF_UNIX; 
strcpy(address.sun_path, “server_socket”);
len = sizeof(address);
/* connettiamo la nostra socket con quella del server */ 
result = connect(sockfd, (struct sockaddr*)&address, len); 
if (result ==-1) {
perror(“ops:client 1”); 
exit(1);
}
/* possiamo leggere e scrivere via sockfd */ 
write(sockfd, &ch, 1);
read(sockfd, &ch,1);
printf(“char dal server = %c\n”,ch); 
close(sockfd);
exit(0);
}


//server locale
#include <sys/types.h> 
#include <sys/socket.h> 
#include <stdio.h> 
#include <sys/un.h> 
#include <unistd.h> 
#include <stdlib.h>
int main() {
int server_sockfd, client_sockfd; 
int server_len, client_len;
struct sockaddr_un server_address; 
struct sockaddr_un client_address;
/* Rimuoviamo eventuali vecchie socket e creiamo una socket senza nome per il server */
unlink(“server_socket”);
server_sockfd = socket(AF_UNIX,SOCK_STREAM,0);
/* Assegnamo un nome alla socket */ 
server_address.sun_family = AF_UNIX; s
trcpy(server_address.sun_path, “server_socket”); 
server_len = sizeof(server_address);
bind(server_sockfd, (struct sockaddr*)&server_address, server_len);
/* creiamo una coda di connessione ed attendiamo i client */ 
listen(server_sockfd, 5);
while(1){
char ch;
printf(“server in attesa\n”);
/* accetta una connessione */ 
client_len = sizeof(client_address);
client_sockfd = accept(server_sockfd,structsockaddr*)&client_address,&client_len);
/* Leggiamo e scriviamo al client su client_sockfd */ 
read(client_sockfd, &ch,1);
ch++;
write(client_sockfd, &ch,1); 
close(client_sockfd);
}
}
