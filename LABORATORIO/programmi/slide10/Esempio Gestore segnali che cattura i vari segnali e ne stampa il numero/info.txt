SI vuole catare i seguenti segnali tramite la kill e sono:
1) kill -USR1 pid
2) kill -USR2 pid
3) ctrl+c
4) ctrl+z
OVVIAMENTE PER POTER ESSERE FATTA UNA KILL BISGONA FARLO SECONDO 2 METODI: 
1) O eseguo in una shell principale il programma e poi apriamo una shell secondaria per eseguire le kill 
    1.1)nella shell proncipale posso solo inviargli i segnali SIGINT e SIGSTP
    1.2)nella shell secondaria posso solo eseguire le kill per i segnali SIGUSR1 e SIGUSR2
2) O eseguo il programma in background con "./exe &" usando una sola shell
    2.1)ma posso solo eseguire le kill per i segnali SIGUSR1 e SIGUSR2.

La funzione per la gestione del segnale è un solo handler per tutti:

 
static void sig_usr(int signo)
{
if (signo == SIGUSR1) printf("received SIGUSR1\n");
else if (signo == SIGUSR2) printf("received SIGUSR2\n");
else if (signo == SIGINT) printf("received SIGINT\n");
else if (signo == SIGTSTP) printf("received SIGTSTP\n");
else
err_dump("received signal %d\n", signo); return;
}

E VIENE CHIAMATA TRAMITE LE SIGNAL

if (signal(SIGUSR1, sig_usr) == SIG_ERR) err_sys("can't catch SIGUSR1");
if (signal(SIGUSR2, sig_usr) == SIG_ERR) err_sys("can't catch SIGUSR2");
if (signal(SIGINT, sig_usr) == SIG_ERR) err_sys("can't catch SIGINT");
if (signal(SIGTSTP, sig_usr) == SIG_ERR) err_sys("can't catch SIGTSTP");

PER RIMANERE SEMPRE IN ATTIVO ESEGUO PRIMA DEL RETURN UNA pause(); che sospende il processo chiamante finché non è intercettato un segnale per poi restituire il controllo solo dopo che un gestore di segnale è eseguito QUINDI:

while(1) pause();

