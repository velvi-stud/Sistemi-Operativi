const: 
	A: int: 10
	B: int: 12
var: 
	mutexA: signal: 1
	indexA: int: 0
	
	mutdatA: signal: 1
	datiA: int: 0

	mutexB: signal: 1
	indexB: int: 0

	mutdatB: signal: 1
	datiB: int: 0
	
	state[A]: array of signal: all of 0

	mutvotA[A]: array of signal: all of 1
	votoA[A]: array of int: all of 0

	state[B]: array of signal: all of 0
	
	mutvotB[B]: array of signal: all of 1
	votoB[B]: array of int: all of 0

	pidmax: int: 0

process_start(){
	signal(stateA[0]);
}


process_A(){

	wait(mutexA);
	int k = indexA;
	indexA ++;
	signal(mutexA);

do{
	wait(stateA[k]);	

	if(k==pidmax){
		for(i=1 to A){
			if i != pidmax
				signal(stateA[i]);
		}
	}

	ind = rand(0..B-1);

	wait(mutvotB[ind]);
	votoB[ind]=votoB[ind]+1;
	signal(mutvotB[ind]);

	wait(mutdatA);
	datiA++;
	if(datiA<A){
		signal(mutdatA);
	}
	else{
		signal(mutindA);
		max= votoB[0];
		for(i=1 to B){
			if (votoB[i]>max){
				max= votoB[i];
				pidmax=i;
			}
		}
		signal(stateB[pidmax]);
	}

}while(1)
	
}

process_B(){
	wait(mutexB);
	int k = indexB;
	indexB ++;
	signal(mutexB);

do{
	wait(stateB[k]);
	if(k==pidmaxB){
		for(i=1 to B){
			if (i != pidmaxB)
				signal(stateB[i]);
		}
	}
	
	ind = rand(0..B-1);

	wait(mutvotA[ind]);
	votoA[ind]=votoA[ind]+1;
	signal(mutvotA[ind]);

	wait(mutdatB);
	datiB++;
	if(datiB<B){
		signal(mutdatB);
		wait(stateB[k]);
	}
	else{
		signal(mutindB);
		max= votoA[0];
		pidmax= 0;
		for(i=1 to A){
			if (votoA[i]>max){
				max= votoA[i];
				pidmax=i;
			}
		}
		signal(stateA[pidmax]);
	}

}while(1)
}	