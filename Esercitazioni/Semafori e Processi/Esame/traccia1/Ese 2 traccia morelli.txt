In un sistema sono attivi N processi dotati di un credito C. Ogni processo genera un numero casuale P in [1..C] e
verifica se il proprio P è maggiore di quello degli altri processi (a parità di P vince il processo con PID minore). Il
processo vincitore (quello con P maggiore) aggiunge al proprio credito C le quantità P generate da tutti gli altri
processi che invece sottragono al proprio credito C la quantità P generata. Un processo con credito C=0 termina.
Discutere la soluzione proposta in termini di possibili situazioni di starvation/deadlock e, nel caso, si propongano
soluzioni ammissibili.

const N=...
var:
choosing[n]:array of boolean;
credito[n]: array of integer
P[N]:array of integer;
mutex:sem(1);
mutex2:sem(1);
vincitore:= int;
perdente:= int;
mutex3:= sem(1);


Begin
vincitore:= 0;
perdente:= 0;
for j =1 to N 
chhosing[j]=falase // nessuno sta scegliendo il numero P
credito[j]=C // inizializzo il credito a C
P[j]=0;

Processo Pi
parbegin
    repat
        //deve generare il proprio numero 
        wait(mutex)
        choosing[i]=true;
        P[i]= rand(1..C); // sceglie un numero randomico tra 1 e C
        choosing[i]=false;
        signal(mutex);

        for j=1 to N 
            while (choosing[j] != false ) do {nothing} 
                // se qualcuno sta scegliendo non fare nulla
        while ( P[j] != 0) do 
        // entra in sezione critica
            wait (mutex2)
            if P[i] = P[j] {
                if Pid[processo i] > Pid[processo j]
                    vincitore=j;
                    perdente=i;
                else
                    vincitore=i;
                    perdente=j;
            }else if P[i] > P[j]
                    vincitore=i;
                    perdente=j;
            else
                    vincitore=j;
                    perdente=i;
            end if;

        credito[vincente]=+P[perdente];
        credito[perdente]=-P[perdente];
        signal (mutex2);
    forever
    
Processo Pj....
parend;

end;
